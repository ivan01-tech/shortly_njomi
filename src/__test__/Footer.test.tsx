// Generated by CodiumAI

import Footer from "@/components/layout/Footer";
import { render } from "@testing-library/react";

describe("Footer", () => {
  // The function renders a footer element with a dark violet background.
  it("should render a footer element with a dark violet background", () => {
    const wrapper = render(<Footer />);
    expect(wrapper.find("footer").hasClass("bg-very-dark-violet")).toBe(true);
  });

  // The footer contains a logo element with a link to the homepage.
  it("should contain a logo element with a link to the homepage", () => {
    const wrapper = render(<Footer />);
    expect(wrapper.find(".logo_footer").find("a").prop("href")).toBe("/");
  });

  // The footer contains three sections: "Features", "Resources", and "Company".
  it('should contain three sections: "Features", "Resources", and "Company"', () => {
    const wrapper = render(<Footer />);
    expect(wrapper.find("section")).toHaveLength(3);
    expect(wrapper.find("section").at(0).find("h4").text()).toBe("Features");
    expect(wrapper.find("section").at(1).find("h4").text()).toBe("Resources");
    expect(wrapper.find("section").at(2).find("h4").text()).toBe("Company");
  });

  // The function handles empty data for the sections and social media icons gracefully.
  it("should handle empty data for the sections and social media icons gracefully", () => {
    const wrapper = render(<Footer />);
    expect(wrapper.find("section").at(0).find("ul").children()).toHaveLength(0);
    expect(
      wrapper
        .find(".flex.justify-center.gap-4.text-2xl.my-6.text-white")
        .children()
    ).toHaveLength(0);
  });

  // The function handles missing or invalid URLs for the links in the footer.
  it("should handle missing or invalid URLs for the links in the footer", () => {
    const wrapper = render(<Footer />);
    expect(wrapper.find("a").prop("href")).toBe("/");
  });

  // The function handles long text in the footer without breaking the layout.
  it("should handle long text in the footer without breaking the layout", () => {
    const wrapper = render(<Footer />);
    expect(
      wrapper
        .find(
          ".flex.flex-col.mdp\\:flex-row.mdp\\:w-full.mdp\\:justify-around.md\\:w-auto.gap-3.flex-wrap"
        )
        .hasClass("max_width")
    ).toBe(true);
  });
});
